non_det$id <- names(newP_yr)
for(i in 1:length(names(newP_yr))){
non_det[i,newP_yr[[i]]$month+1] <- newP_yr[[i]]$n-newP_yr[[i]]$nd
non_det[i, "ecodistrict"] <- newP_yr[[i]][1,"ecodistrict"]
}
non_det %>%
tidyr::pivot_longer(!id, !ecodistrict, names_to = "month", values_to = "nondetect") %>%
dplyr::group_by(id, ecodistrict) %>%
dplyr::mutate(month = as.numeric(month))
non_det %>%
tidyr::pivot_longer(-c(id, ecodistrict), names_to = "month", values_to = "nondetect") %>%
dplyr::group_by(id, ecodistrict) %>%
dplyr::mutate(month = as.numeric(month))
det = as.data.frame(matrix(
ncol=14,
nrow=length(names(newP_yr))
))
names(det) <- c("id",
1:12,
"ecodistrict")
det$id <- names(newP_yr)
for(i in 1:length(names(newP_yr))){
det[i,newP_yr[[i]]$month+1] <- newP_yr[[i]]$nd
det[i, "ecodistrict"] <- newP_yr[[i]][1,"ecodistrict"]
}
det <- det %>%
tidyr::pivot_longer(-c(id, ecodistrict), names_to = "month", values_to = "detect") %>%
dplyr::group_by(id, ecodistrict) %>%
dplyr::mutate(month = as.numeric(month))
CP = as.data.frame(matrix(ncol=14,
nrow=length(names(newP_yr))))
names(CP) <- c("id",
1:12,
"ecodistrict")
CP$id <- names(newP_yr)
CPscaled = lapply(newP_yr, function(x) {
data.frame(x) %>%
dplyr::mutate(x, scaleP = dplyr::case_when(
p == 1 ~ 1,
p == 0 ~ 0,
p != 0|1 ~ minMax(p)))
})
for(i in 1:length(names(CPscaled))){
CP[i,CPscaled[[i]]$month+1] <- CPscaled[[i]]$scaleP
CP[i, "ecodistrict"] <- CPscaled[[i]][1,"ecodistrict"]
}
CP_long = CP %>%
tidyr::pivot_longer(-c(id, ecodistrict), names_to = "month", values_to = "scaleP") %>%
dplyr::group_by(id, ecodistrict) %>%
dplyr::mutate(month = as.numeric(month))
View(CP_long)
#' @author Tim Barrett \email{Tim.Barrett@@dfo-mpo.gc.ca}
#' @author Melissa Morrison \email{Melissa.Morrison@@dfo-mpo.gc.ca}
#' @rdname scale_prob_by_year
#' @export
#' @examples
#' \dontrun{
#' scale_prob_by_year(data = D_mb, ecodistrict.select = "Scotian Shelf")
#' }
scale_prob_by_year <- function(data, ecodistrict.select) {
# Implement min max scaling of detection probabilities
minMax <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
if(!ecodistrict.select %in% data$ecodistrict) {
stop("Ecodistrict not found in data")
}
# Call the data in to merge taxonomic info
data %<>%
dplyr::filter(., ecodistrict %in% ecodistrict.select)
row.lengths <- lapply(newP_yr, nrow)
# id.sp.pr <- unique(stringr::word(names(newP_yr), 1,3, sep=stringr::fixed(";")))
# transform newP_yr to data frame
non_det <- as.data.frame(matrix(
ncol=14,
nrow=length(names(newP_yr))
))
names(non_det) <- c("id",
1:12,
"ecodistrict")
non_det$id <- names(newP_yr)
for(i in 1:length(names(newP_yr))){
non_det[i,newP_yr[[i]]$month+1] <- newP_yr[[i]]$n-newP_yr[[i]]$nd
non_det[i, "ecodistrict"] <- newP_yr[[i]][1,"ecodistrict"]
}
non_det <- non_det %>%
tidyr::pivot_longer(-c(id, ecodistrict), names_to = "month", values_to = "nondetect") %>%
dplyr::group_by(id, ecodistrict) %>%
dplyr::mutate(month = as.numeric(month))
det = as.data.frame(matrix(
ncol=14,
nrow=length(names(newP_yr))
))
names(det) <- c("id",
1:12,
"ecodistrict")
det$id <- names(newP_yr)
for(i in 1:length(names(newP_yr))){
det[i,newP_yr[[i]]$month+1] <- newP_yr[[i]]$nd
det[i, "ecodistrict"] <- newP_yr[[i]][1,"ecodistrict"]
}
det <- det %>%
tidyr::pivot_longer(-c(id, ecodistrict), names_to = "month", values_to = "detect") %>%
dplyr::group_by(id, ecodistrict) %>%
dplyr::mutate(month = as.numeric(month))
DF = dplyr::left_join(det,non_det, by=c("id","ecodistrict","month"))
CP = as.data.frame(matrix(ncol=14,
nrow=length(names(newP_yr))))
names(CP) <- c("id",
1:12,
"ecodistrict")
CP$id <- names(newP_yr)
CPscaled = lapply(newP_yr, function(x) {
data.frame(x) %>%
dplyr::mutate(x, scaleP = dplyr::case_when(
p == 1 ~ 1,
p == 0 ~ 0,
p != 0|1 ~ minMax(p)))
})
for(i in 1:length(names(CPscaled))){
CP[i,CPscaled[[i]]$month+1] <- CPscaled[[i]]$scaleP
CP[i, "ecodistrict"] <- CPscaled[[i]][1,"ecodistrict"]
}
CP_long = CP %>%
tidyr::pivot_longer(-c(id, ecodistrict), names_to = "month", values_to = "scaleP") %>%
dplyr::group_by(id, ecodistrict) %>%
dplyr::mutate(month = as.numeric(month))
DF = dplyr::left_join(DF,CP_long, by=c("id","ecodistrict","month"))
DF[c("GOTeDNA_ID","species","primer","year")] = stringr::str_split_fixed(DF$id, ";", 4)
DF = DF %>%
dplyr::left_join(unique(data[,c("phylum","class","order","family","genus","scientificName")]),
by=c("species"="scientificName"),
multiple="first")
# Interpolate missing months
DF$fill <- NA #add column
for(species in unique(DF$id)) {
DF1 <- DF[DF$id==species,]
#then add code for interpolation that starts with DF2 = .....
# add dataframe above and below to help will fills for jan and dec. Needed to have 4 copyies because of max fucntion used below
DF2 <- rbind(cbind(DF1,data.frame(G=1)),
cbind(DF1,data.frame(G=2)),
cbind(DF1,data.frame(G=3)),
cbind(DF1,data.frame(G=4)))
DF2$fill <- DF2$scaleP
# which months are NA and define groups with sequential NAs
month_na_id <- which(is.na(DF2$scaleP))
nagroups <- cumsum(c(1, abs(month_na_id[-length(month_na_id)] - month_na_id[-1]) > 1))
# identify which NA groups are in G = 2 or 3 (ignore 1 and 2)
nagroupsG <- list()
for(i in unique(nagroups)) {nagroupsG[[i]] <- max(DF2$G[month_na_id[which(nagroups==i)]])}
nagroupsGv <- unlist(nagroupsG)
nagroupsf <- which(nagroupsGv%in%2:3)
# loop over final NA groups and fill in using average
for(i in unique(nagroupsf)){
DF2$fill[month_na_id[which(nagroups==i)]] <- (DF2$scaleP[min(month_na_id[which(nagroups==i)])-1] + DF2$scaleP[max(month_na_id[which(nagroups==i)])+1])/2
}
#then put values from DF3 back into DF$id.sp.pr.yr. This assumes that the months are all in the correct order (jan to dec) in DF3 and test_interp
# DF3 is final DF with fills
DF3 <- DF2[DF2$G==2,]
DF$fill[DF$id==species] <- DF3$fill
}
# Store data frame in global environment
.GlobalEnv$Pscaled_yr <- DF
}
rm(scale_prob_by_year())
rm(scale_prob_by_year
)
load_all()
scale_prob_by_year(D_mb, "Scotian Shelf")
View(Pscaled_yr)
load_all()
scale_prob_by_month(D_mb, "Scotian Shelf")
load_all()
sc.mo = scale_prob_by_month(D_mb, "Scotian Shelf")
View(sc.mo)
test_that("monthly probabilities are scaled and missing months are interpolated", {
expect_equal(scale_prob_by_month(data = D_mb, ecodistrict.select = "Scotian Shelf"),
data.frame(Pscaled_agg))
})
test_that("monthly probabilities are scaled and missing months are interpolated", {
expect_equal(scale_mth = scale_prob_by_month(data = D_mb, ecodistrict.select = "Scotian Shelf"),
data.frame(scale_mth))
})
test_that("monthly probabilities are scaled and missing months are interpolated", {
expect_equal(scale_mth <- scale_prob_by_month(data = D_mb, ecodistrict.select = "Scotian Shelf"),
data.frame(scale_mth))
})
test_that("monthly probabilities are scaled and missing months are interpolated", {
expect_equal(scale_mth <- scale_prob_by_month(data = D_mb, ecodistrict.select = "Scotian Shelf"),
list(scale_mth))
})
test_that("monthly probabilities are scaled and missing months are interpolated", {
expect_s3_class(scale_mth <- scale_prob_by_month(data = D_mb, ecodistrict.select = "Scotian Shelf"),
is_a("grouped_df/tbl_df/tbl_data.frame"))
})
test_that("monthly probabilities are scaled and missing months are interpolated", {
expect_s3_class(scale_mth <- scale_prob_by_month(data = D_mb, ecodistrict.select = "Scotian Shelf"),
as.data.frame(scale_mth))
})
load_all()
test_that("monthly probabilities are scaled and missing months are interpolated", {
expect_s3_class(scale_mth <- scale_prob_by_month(data = D_mb, ecodistrict.select = "Scotian Shelf"),
data.frame(scale_mth))
})
test_that("monthly probabilities are scaled and missing months are interpolated", {
expect_equal(scale_mth <- scale_prob_by_month(data = D_mb, ecodistrict.select = "Scotian Shelf"),
data.frame(scale_mth))
})
test_that("monthly probabilities are scaled and missing months are interpolated", {
expect_equal(scale_mth <- scale_prob_by_month(data = D_mb, ecodistrict.select = "Scotian Shelf"),
dplyr::tibble(scale_mth))
})
use_test("scale_prob_by_year")
load_all()
test_that("monthly probabilities are scaled for each year and missing months are interpolated", {
expect_equal(scale_yr <- scale_prob_by_year(data = D_mb, ecodistrict.select = "Scotian Shelf"),
dplyr::tibble(scale_yr))
})
test_that("calc_det_prob() calculates detection probability", {
expect_equal(newP = calc_det_prob(D_mb, ecodistrict.select = "Scotian Shelf"),
list(newP_agg, newP_yr))
})
newP=calc_det_prob(D_mb, "Scotian Shelf")
View(newP)
test_that("calc_det_prob() calculates detection probability", {
expect_equal(newP = calc_det_prob(D_mb, ecodistrict.select = "Scotian Shelf"),
list(newP))
})
test_that("calc_det_prob() calculates detection probability", {
expect_equal(newP = calc_det_prob(D_mb, ecodistrict.select = "Scotian Shelf"),
as.list(newP))
})
test_that("calc_det_prob() calculates detection probability", {
expect_equal(newP = calc_det_prob(D_mb, ecodistrict.select = "Scotian Shelf"),
data.frame(newP))
})
View(newP)
test_that("calc_det_prob() calculates detection probability", {
expect_equal(newprob = calc_det_prob(D_mb, ecodistrict.select = "Scotian Shelf"),
data.frame(newprob))
})
test_that("calc_det_prob() calculates detection probability", {
expect_equal(newprob <- calc_det_prob(D_mb, ecodistrict.select = "Scotian Shelf"),
data.frame(newprob))
})
test_that("calc_det_prob() calculates detection probability", {
expect_equal(newprob <- calc_det_prob(D_mb, ecodistrict.select = "Scotian Shelf"),
list(newprob))
})
test_that("calc_det_prob() calculates detection probability", {
expect_equal(newprob <- calc_det_prob(D_mb, ecodistrict.select = "Scotian Shelf"),
sort(unlist(newprob)))
})
test_that("calc_det_prob() calculates detection probability", {
expect_equal(newprob <- calc_det_prob(D_mb, ecodistrict.select = "Scotian Shelf"),
as.list(newprob))
})
document()
check()
test_that("calc_det_prob() calculates detection probability", {
expect_equal(newprob <- calc_det_prob(
read_data("metabarcoding",NULL),
ecodistrict.select = "Scotian Shelf"),
as.list(newprob))
})
check()
test_that("monthly probabilities are scaled and missing months are interpolated", {
expect_equal(scale_mth <- scale_prob_by_month(data = read_data("metabarcoding",test_path("testdata","test_mb")),
ecodistrict.select = "Scotian Shelf"),
dplyr::tibble(scale_mth))
})
read_data("metabarcoding",test_path("testdata","test_mb")
)
test_that("monthly probabilities are scaled and missing months are interpolated", {
expect_equal(scale_mth <- scale_prob_by_month(data = read_data("metabarcoding",test_path("testdata","test_mb.xlsx")),
ecodistrict.select = "Scotian Shelf"),
dplyr::tibble(scale_mth))
})
read_data("metabarcoding",test_path("testdata","test_mb.xlsx"))
use_r("helper_testdata")
View(D_mb)
str(GOTeDNA)
load_all()
str(GOTeDNA)
str("GOTeDNA")
str(library(GOTeDNA))
test_path()
?GOTeDNA
?calc_det_prob
document()
test_that("monthly probabilities are scaled and missing months are interpolated", {
expect_equal(scale_mth <- scale_prob_by_month(data = read_data("metabarcoding",test_path("testdata","test_mb.xlsx")),
ecodistrict.select = "Scotian Shelf"),
dplyr::tibble(scale_mth))
})
test_that("monthly probabilities are scaled and missing months are interpolated", {
expect_equal(scale_mth <- scale_prob_by_month(data = read_data("metabarcoding",test_path("testdata/test_mb.xlsx")),
ecodistrict.select = "Scotian Shelf"),
dplyr::tibble(scale_mth))
})
read_data("metabarcoding",test_path("testdata/test_mb.xlsx"))
load_all()
read_data("metabarcoding",test_path("testdata/test_mb.xlsx"))
load_all()
test_that("monthly probabilities are scaled for each year and missing months are interpolated", {
expect_equal(scale_yr <- scale_prob_by_year(data = read_data("metabarcoding",NULL),
ecodistrict.select = "Scotian Shelf"),
dplyr::tibble(scale_yr))
})
test_that("monthly probabilities are scaled for each year and missing months are interpolated", {
expect_equal(scale_yr <- scale_prob_by_year(data = read_data("metabarcoding",test_path("testdata","GOTeDNA-8_data.xlsx")),
ecodistrict.select = "Scotian Shelf"),
dplyr::tibble(scale_yr))
})
read_data("metabarcoding",test_path("testdata","GOTeDNA-8_data.xlsx"))
test_that("monthly probabilities are scaled for each year and missing months are interpolated", {
expect_equal(scale_yr <- scale_prob_by_year(data = read_data("metabarcoding",test_path("testdata")),
ecodistrict.select = "Scotian Shelf"),
dplyr::tibble(scale_yr))
})
test_that("monthly probabilities are scaled and missing months are interpolated", {
expect_equal(scale_mth <- scale_prob_by_month(data = read_data("metabarcoding",test_path("testdata")),
ecodistrict.select = "Scotian Shelf"),
dplyr::tibble(scale_mth))
})
test_that("calc_det_prob() calculates detection probability", {
expect_equal(newprob <- calc_det_prob(data = read_data("metabarcoding",test_path("testdata")),
ecodistrict.select = "Scotian Shelf"),
as.list(newprob))
})
test_that("read_data() works", {
expect_equal(D_mb <- read_data(choose.method="metabarcoding", path.folder=NULL),
dplyr::tibble(D_mb))
expect_equal(D_mb <- read_data(choose.method="metabarcoding", path.folder=test_path("testdata")),
dplyr::tibble(D_mb))
expect_equal(D_qp <- read_data(choose.method="qPCR", path.folder=test_path("testdata")),
data.frame(D_qp))
})
document()
check()
document()
load_all()
check()
test_that("monthly probabilities are scaled for each year and missing months are interpolated", {
expect_equal({
sc_df <- calc_det_prob(read_data("metabarcoding",test_path("testdata")), "Scotian Shelf")
Pscaled_agg <- sc_df[["Pscaled_agg"]]
scale_yr <- scale_prob_by_year(data = read_data("metabarcoding",test_path("testdata")),
ecodistrict.select = "Scotian Shelf")},
dplyr::tibble(scale_yr))
})
test_that("monthly probabilities are scaled for each year and missing months are interpolated", {
expect_equal({
sc_df <- calc_det_prob(read_data("metabarcoding",test_path("testdata")), "Scotian Shelf")
Pscaled_yr <- sc_df[["Pscaled_yr"]]
scale_yr <- scale_prob_by_year(data = read_data("metabarcoding",test_path("testdata")),
ecodistrict.select = "Scotian Shelf")},
dplyr::tibble(scale_yr))
})
test_that("monthly probabilities are scaled for each year and missing months are interpolated", {
expect_equal({
sc_df <- calc_det_prob(read_data("metabarcoding",test_path("testdata")), "Scotian Shelf")
newP_yr <- sc_df[["newP_yr"]]
scale_yr <- scale_prob_by_year(data = read_data("metabarcoding",test_path("testdata")),
ecodistrict.select = "Scotian Shelf")},
dplyr::tibble(scale_yr))
})
sc_df <- calc_det_prob(read_data("metabarcoding",test_path("testdata")), "Scotian Shelf")
sc_lst <- calc_det_prob(read_data("metabarcoding",test_path("testdata")), "Scotian Shelf")
newP_yr <- sc_lst[["newP_yr"]]
View(newP_yr)
scale_prob_by_year(data = read_data("metabarcoding",test_path("testdata")),
ecodistrict.select = "Scotian Shelf")
test_that("monthly probabilities are scaled for each year and missing months are interpolated", {
expect_equal({
sc_lst <- calc_det_prob(read_data("metabarcoding",test_path("testdata")), "Scotian Shelf")
newP_yr <- sc_lst[["newP_yr"]]
scale_yr <- scale_prob_by_year(data = read_data("metabarcoding",test_path("testdata")),
ecodistrict.select = "Scotian Shelf")},
dplyr::tibble(scale_yr))
})
test_that("monthly probabilities are scaled and missing months are interpolated", {
expect_equal({
sc_lst <- calc_det_prob(read_data("metabarcoding",test_path("testdata")), "Scotian Shelf")
newP_agg <- sc_lst[["newP_agg"]]
scale_mth <- scale_prob_by_month(data = read_data("metabarcoding",test_path("testdata")),
ecodistrict.select = "Scotian Shelf")},
dplyr::tibble(scale_mth))
})
View(sc_lst)
test_that("monthly probabilities are scaled for each year and missing months are interpolated", {
expect_equal({
sc_lst <- calc_det_prob(read_data("metabarcoding",test_path("testdata")), "Scotian Shelf")
newP_yr <- sc_lst[["newP_yr"]]
scale_yr <- scale_prob_by_year(data = read_data("metabarcoding",test_path("testdata")),
ecodistrict.select = "Scotian Shelf")},
dplyr::tibble(scale_yr))
})
calc_det_prob(read_data("metabarcoding",test_path("testdata")), "Scotian Shelf")[["newP_yr"]]
test_that("monthly probabilities are scaled for each year and missing months are interpolated", {
expect_equal({
newP_yr <- calc_det_prob(read_data("metabarcoding",test_path("testdata")), "Scotian Shelf")[["newP_yr"]]
scale_yr <- scale_prob_by_year(data = read_data("metabarcoding",test_path("testdata")),
ecodistrict.select = "Scotian Shelf")},
dplyr::tibble(scale_yr))
})
test_that("monthly probabilities are scaled for each year and missing months are interpolated", {
newP_yr <- calc_det_prob(read_data("metabarcoding",test_path("testdata")), "Scotian Shelf")[["newP_yr"]]
expect_equal(scale_yr <- scale_prob_by_year(data = read_data("metabarcoding",test_path("testdata")),
ecodistrict.select = "Scotian Shelf"),
dplyr::tibble(scale_yr))
})
test_that("monthly probabilities are scaled for each year and missing months are interpolated", {
newP_yr <<- calc_det_prob(read_data("metabarcoding",test_path("testdata")), "Scotian Shelf")[["newP_yr"]]
expect_equal(scale_yr <- scale_prob_by_year(data = read_data("metabarcoding",test_path("testdata")),
ecodistrict.select = "Scotian Shelf"),
dplyr::tibble(scale_yr))
})
test_that("monthly probabilities are scaled for each year and missing months are interpolated", {
newP_yr <<- calc_det_prob(read_data("metabarcoding",test_path("testdata")), "Scotian Shelf")[["newP_yr"]]
expect_equal(scale_yr <- scale_prob_by_year(data = read_data("metabarcoding",test_path("testdata")),
ecodistrict.select = "Scotian Shelf"),
dplyr::tibble(scale_yr))
})
test_that("monthly probabilities are scaled and missing months are interpolated", {
newP_agg <<- calc_det_prob(read_data("metabarcoding",test_path("testdata")), "Scotian Shelf")[["newP_agg"]]
expect_equal(scale_mth <- scale_prob_by_month(data = read_data("metabarcoding",test_path("testdata")),
ecodistrict.select = "Scotian Shelf"),
dplyr::tibble(scale_mth))
})
document()
check()
document()
load_all()
check()
globalVariables()
globalVariables(names = c(".", "GOTeDNA_ID", "concentration", "controlType", "detected", "ecodistrict", "eventID",
"id", "kingdom", "month", "newP_agg", "newP_yr", "scientificName", "target_gene",
"target_subfragment", "year", package = "GOTeDNA", add=TRUE))
globalVariables()
globalVariables(-c("GOTeDNA","TRUE"))
globalVariables(c(-"GOTeDNA",-"TRUE"))
globalVariables(!c("GOTeDNA","TRUE"))
rm("GOTeDNA","TRUE")
globalVariables(NULL)
globalVariables(names=NULL)
check()
document()
load_all()
check()
use_r("thresh_fig")
document()
use_test("thresh_fig")
load_all()
install.packages("vdiffr")
library(vdiffr)
test_that("thresh_fig returns a ggplot2 object", {
local_edition(3)
newP_agg <<- calc_det_prob(read_data("metabarcoding",test_path("testdata")), "Scotian Shelf")[["newP_agg"]]
vdiffr::expect_doppelganger(thresh_fig(taxon.level = "species", taxon.name = "Acartia hudsonica", threshold = "90", ecodistrict.select = "Bay of Fundy"))
})
test_that("thresh_fig returns a ggplot2 object", {
local_edition(3)
newP_agg <<- calc_det_prob(read_data("metabarcoding",test_path("testdata")), "Scotian Shelf")[["newP_agg"]]
Pscaled_agg <<- scale_prob_by_month(read_data("metabarcoding",test_path("testdata")),
ecodistrict.select = "Scotian Shelf"))
test_that("thresh_fig returns a ggplot2 object", {
local_edition(3)
newP_agg <<- calc_det_prob(read_data("metabarcoding",test_path("testdata")), "Scotian Shelf")[["newP_agg"]]
Pscaled_agg <<- scale_prob_by_month(read_data("metabarcoding",test_path("testdata")),
ecodistrict.select = "Scotian Shelf")
vdiffr::expect_doppelganger(thresh_fig(taxon.level = "species", taxon.name = "Acartia hudsonica", threshold = "90", ecodistrict.select = "Bay of Fundy"))
})
test_that("thresh_fig returns a ggplot2 object", {
local_edition(3)
newP_agg <<- calc_det_prob(read_data("metabarcoding",test_path("testdata")), "Scotian Shelf")[["newP_agg"]]
Pscaled_agg <<- scale_prob_by_month(read_data("metabarcoding",test_path("testdata")),
ecodistrict.select = "Scotian Shelf")
vdiffr::expect_doppelganger(thresh_fig(taxon.level = "species", taxon.name = "Acartia hudsonica", threshold = "90", ecodistrict.select = "Scotian Shelf"))
})
test_that("thresh_fig returns a ggplot2 object", {
local_edition(3)
newP_agg <<- calc_det_prob(read_data("metabarcoding",test_path("testdata")), "Scotian Shelf")[["newP_agg"]]
Pscaled_agg <<- scale_prob_by_month(read_data("metabarcoding",test_path("testdata")),
ecodistrict.select = "Scotian Shelf")
vdiffr::expect_doppelganger(
title = "thresh_fig",
fig = thresh_fig(taxon.level = "species", taxon.name = "Acartia hudsonica", threshold = "90", ecodistrict.select = "Scotian Shelf"))
})
snapshot_review()
install.packages("diffviewer")
snapshot_review()
test()
check()
document()
check()
.Last.error
load_all()
load_all()
check()
check()
document()
check()
check()
document()
check()
document()
check()
document()
document()
document()
check()
