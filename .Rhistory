)
}
method = data.frame(values=c(3,4),
labels = c("qPCR","metabarcoding"))
choose.method <- switch(choose.method, method$values[method$labels==choose.method])
samples <- suppressWarnings(
lapply(files, function(x) readxl::read_excel(x, sheet = choose.method))
)
names(samples) <- files
# remove list elements where sample sheet is empty
samples <- Filter(function(a) any(!is.na(a[["GOTeDNA_ID"]])), samples)
metadata <- lapply(files, function(x)  readxl::read_excel(x, sheet = 2))
names(metadata) <- files
# only read in metadata for which there are sample sheets
metadata <- metadata[names(metadata) %in% names(samples)]
# Ensures dates are in unified format across dataset
# In character format to make graphing possible
suppressWarnings(
for (i in 1:length(metadata)){
if ((typeof(metadata[[i]]$eventDate) == "double") == TRUE ) {
metadata[[i]]$newDate <- as.character(metadata[[i]]$eventDate)
} else {
ifelse(
((nchar(metadata[[i]]$eventDate) == 5) == TRUE),
(metadata[[i]]$newDate <-
as.character(
as.Date(as.numeric(metadata[[i]]$eventDate), origin = "1899-12-30"))),
(metadata[[i]]$newDate2 <-
as.character(
as.Date(lubridate::parse_date_time(metadata[[i]]$eventDate, orders = "d m y")))))
}
metadata[[i]]$eventDate <- metadata[[i]]$newDate  # merge Date columns
metadata[[i]]$eventDate[!is.na(metadata[[i]]$newDate2)] <- metadata[[i]]$newDate2[!is.na(metadata[[i]]$newDate2)]
metadata[[i]] <- subset(metadata[[i]], is.na(controlType)) # removes field and extraction blanks
}
)
for (k in 1:length(metadata)){
metadata[[k]]$year <- lubridate::year(metadata[[k]]$eventDate)
metadata[[k]]$month <- lubridate::month(metadata[[k]]$eventDate)
}
# match event date to samples
for (j in 1:length(samples)) {
samples[[j]]$date <- metadata[[j]]$eventDate[match(samples[[j]]$eventID, metadata[[j]]$eventID)]
samples[[j]]$ecodistrict <- metadata[[j]]$ecodistrict[match(samples[[j]]$eventID, metadata[[j]]$eventID)] %>%
stringr::str_remove_all( # clean ecodistrict
pattern="(-?[:digit:])")
samples[[j]]$decimalLatitude <- metadata[[j]]$decimalLatitude[match(samples[[j]]$eventID, metadata[[j]]$eventID)]
samples[[j]]$decimalLongitude <- metadata[[j]]$decimalLongitude[match(samples[[j]]$eventID, metadata[[j]]$eventID)]
samples[[j]]$station <- metadata[[j]]$samplingStation[match(samples[[j]]$eventID, metadata[[j]]$eventID)]
samples[[j]]$year <- lubridate::year(samples[[j]]$date)
samples[[j]]$month <- lubridate::month(samples[[j]]$date)
}
samples <- lapply(samples, function(x) {
if(any(colnames(x) %in% "concentration")==TRUE) {
x %>%
rstatix::drop_na(date) %>% # drop lab/field blanks
subset(!kingdom %in% "NA") %>%
dplyr::group_by(eventID) %>%
dplyr::mutate(detected = dplyr::case_when(
concentration > 0 ~ 1,
concentration == 0 ~ 0)) %>% #,
transform(concentration = suppressWarnings(as.numeric(concentration)))
# is.na(quantificationCycle) ~ 0)) %>%#,
#   aboveLOD = dplyr::case_when(
# all(concentration >= pcr_primer_lod)  ~ 1,
#all(concentration < pcr_primer_lod) ~ 0))
} else {
x %>%
rstatix::drop_na(date) %>%
subset(!kingdom %in% "NA") %>%
dplyr::mutate(detected = dplyr::case_when(
organismQuantity != 0 ~ 1,
organismQuantity == 0 ~ 0))
}
}
)
GOTeDNA_df <- do.call(rbind, lapply(samples, function(x) x[,names(x) %in% c("GOTeDNA_ID", "GOTeDNA_version", "eventID",
"target_gene","target_subfragment", "scientificName",
"kingdom", "phylum", "class", "order", "family",
"genus", "date", "ecodistrict", "decimalLatitude", "decimalLongitude",
"station", "year", "month","organismQuantity","concentration", "detected")]))
rownames(GOTeDNA_df) <- NULL
return(GOTeDNA_df)
}
list.files(path = path.folder,
pattern = "GOTeDNA-[0-9][0-2]_data",
full.names = TRUE)
list.files(path = path.folder,
pattern = "GOTeDNA-[0-9]{0-2}_data",
full.names = TRUE)
list.files(path = path.folder,
pattern = "GOTeDNA-(-?[:digit:])_data",
full.names = TRUE)
list.files(path = path.folder,
pattern = "GOTeDNA-([:digit:])_data",
full.names = TRUE)
list.files(path = path.folder,
pattern = "GOTeDNA-[:digit:]_data",
full.names = TRUE)
list.files(path = path.folder,
pattern = "GOTeDNA-[0-9][:digit:]_data",
full.names = TRUE)
list.files(path = path.folder,
pattern = "GOTeDNA-[0-9][0-9]_data",
full.names = TRUE)
list.files(path = path.folder,
pattern = "GOTeDNA-[0-9]{1:2}_data",
full.names = TRUE)
list.files(path = path.folder,
pattern = "GOTeDNA-[0-9]{1-2}_data",
full.names = TRUE)
list.files(path = path.folder,
pattern = "GOTeDNA-[0-9]{1,2}_data",
full.names = TRUE)
read_data <- function(choose.method, path.folder) {
if (is.null(path.folder)) path.folder <- getwd()
files <- list.files(path = path.folder,
pattern = "GOTeDNA-[0-9]{1,2}_data",
full.names = TRUE)
if (!is.null(choose.method)) {
choose.method <- match.arg(
arg = choose.method,
choices = c("qPCR",
"metabarcoding"),
several.ok = FALSE
)
}
method = data.frame(values=c(3,4),
labels = c("qPCR","metabarcoding"))
choose.method <- switch(choose.method, method$values[method$labels==choose.method])
samples <- suppressWarnings(
lapply(files, function(x) readxl::read_excel(x, sheet = choose.method))
)
names(samples) <- files
# remove list elements where sample sheet is empty
samples <- Filter(function(a) any(!is.na(a[["GOTeDNA_ID"]])), samples)
metadata <- lapply(files, function(x)  readxl::read_excel(x, sheet = 2))
names(metadata) <- files
# only read in metadata for which there are sample sheets
metadata <- metadata[names(metadata) %in% names(samples)]
# Ensures dates are in unified format across dataset
# In character format to make graphing possible
suppressWarnings(
for (i in 1:length(metadata)){
if ((typeof(metadata[[i]]$eventDate) == "double") == TRUE ) {
metadata[[i]]$newDate <- as.character(metadata[[i]]$eventDate)
} else {
ifelse(
((nchar(metadata[[i]]$eventDate) == 5) == TRUE),
(metadata[[i]]$newDate <-
as.character(
as.Date(as.numeric(metadata[[i]]$eventDate), origin = "1899-12-30"))),
(metadata[[i]]$newDate2 <-
as.character(
as.Date(lubridate::parse_date_time(metadata[[i]]$eventDate, orders = "d m y")))))
}
metadata[[i]]$eventDate <- metadata[[i]]$newDate  # merge Date columns
metadata[[i]]$eventDate[!is.na(metadata[[i]]$newDate2)] <- metadata[[i]]$newDate2[!is.na(metadata[[i]]$newDate2)]
metadata[[i]] <- subset(metadata[[i]], is.na(controlType)) # removes field and extraction blanks
}
)
for (k in 1:length(metadata)){
metadata[[k]]$year <- lubridate::year(metadata[[k]]$eventDate)
metadata[[k]]$month <- lubridate::month(metadata[[k]]$eventDate)
}
# match event date to samples
for (j in 1:length(samples)) {
samples[[j]]$date <- metadata[[j]]$eventDate[match(samples[[j]]$eventID, metadata[[j]]$eventID)]
samples[[j]]$ecodistrict <- metadata[[j]]$ecodistrict[match(samples[[j]]$eventID, metadata[[j]]$eventID)] %>%
stringr::str_remove_all( # clean ecodistrict
pattern="(-?[:digit:])")
samples[[j]]$decimalLatitude <- metadata[[j]]$decimalLatitude[match(samples[[j]]$eventID, metadata[[j]]$eventID)]
samples[[j]]$decimalLongitude <- metadata[[j]]$decimalLongitude[match(samples[[j]]$eventID, metadata[[j]]$eventID)]
samples[[j]]$station <- metadata[[j]]$samplingStation[match(samples[[j]]$eventID, metadata[[j]]$eventID)]
samples[[j]]$year <- lubridate::year(samples[[j]]$date)
samples[[j]]$month <- lubridate::month(samples[[j]]$date)
}
samples <- lapply(samples, function(x) {
if(any(colnames(x) %in% "concentration")==TRUE) {
x %>%
rstatix::drop_na(date) %>% # drop lab/field blanks
subset(!kingdom %in% "NA") %>%
dplyr::group_by(eventID) %>%
dplyr::mutate(detected = dplyr::case_when(
concentration > 0 ~ 1,
concentration == 0 ~ 0)) %>% #,
transform(concentration = suppressWarnings(as.numeric(concentration)))
# is.na(quantificationCycle) ~ 0)) %>%#,
#   aboveLOD = dplyr::case_when(
# all(concentration >= pcr_primer_lod)  ~ 1,
#all(concentration < pcr_primer_lod) ~ 0))
} else {
x %>%
rstatix::drop_na(date) %>%
subset(!kingdom %in% "NA") %>%
dplyr::mutate(detected = dplyr::case_when(
organismQuantity != 0 ~ 1,
organismQuantity == 0 ~ 0))
}
}
)
GOTeDNA_df <- do.call(rbind, lapply(samples, function(x) x[,names(x) %in% c("GOTeDNA_ID", "GOTeDNA_version", "eventID",
"target_gene","target_subfragment", "scientificName",
"kingdom", "phylum", "class", "order", "family",
"genus", "date", "ecodistrict", "decimalLatitude", "decimalLongitude",
"station", "year", "month","organismQuantity","concentration", "detected")]))
rownames(GOTeDNA_df) <- NULL
return(GOTeDNA_df)
}
D_mb = read_data("metabarcoding", "./data/")
View(D_mb)
D_qp = read_data("qPCR", "./data/") # NOTE: stats only developed for D_mb currently. Some figures noted below can be created.
View(D_mb)
str(D_mb)
document()
?read_data
check()
check()
check
check()
?read_data
document()
load_all()
rm(read_data)
load_all()
document()
check()
?read_data
check()
check()
install()
use_testthat()
use_test("read_data")
path.folder="../"
list.files(path = path.folder,
pattern = "GOTeDNA-[0-9]{1,2}_data",
full.names = TRUE)
path.folder="~/Documents/R/data/"
list.files(path = path.folder,
pattern = "GOTeDNA-[0-9]{1,2}_data",
full.names = TRUE)
path.folder="C:/Users/morrisonme/Documents/R/data/"
list.files(path = path.folder,
pattern = "GOTeDNA-[0-9]{1,2}_data",
full.names = TRUE)
test()
test_that("read_data() reads and formats excel sheets", {
expect_equal(read_data(choose.method = "qPCR", path.folder="C:/Users/morrisonme/Documents/R/data/"))
})
test_that("read_data() reads and formats excel sheets", {
expect_equal(read_data(choose.method = "qPCR", path.folder="C:/Users/morrisonme/Documents/R/data/"),
do.call(rbind, lapply(samples, function(x) x[,names(x) %in% c("GOTeDNA_ID", "GOTeDNA_version", "eventID",
"target_gene","target_subfragment", "scientificName",
"kingdom", "phylum", "class", "order", "family",
"genus", "date", "ecodistrict", "decimalLatitude", "decimalLongitude",
"station", "year", "month","organismQuantity","concentration", "detected")])) )
})
test_that("read_data() reads and formats excel sheets", {
expect_equal(read_data(choose.method = "qPCR", path.folder="C:/Users/morrisonme/Documents/R/data/"), GOTeDNA_df)
})
files
test_that("read_data() reads and formats excel sheets", {
expect_equal(read_data(choose.method = "qPCR", path.folder="C:/Users/morrisonme/Documents/R/data/GOTeDNA-10_data.xlsx"),
GOTeDNA_df)
})
test_that("read_data() reads and formats excel sheets", {
expect_equal(read_data(choose.method = "qPCR", path.folder="C:/Users/morrisonme/Documents/R/data/GOTeDNA-3_data.xlsx"),
GOTeDNA_df)
})
path.folder="C:/Users/morrisonme/Documents/R/data/GOTeDNA-3_data.xlsx"
list.files(path = path.folder,
pattern = "GOTeDNA-[0-9]{1,2}_data",
full.names = TRUE)
path.folder="C:/Users/morrisonme/Documents/R/data/"
list.files(path = path.folder,
pattern = "GOTeDNA-[0-9]{1,2}_data",
full.names = TRUE)
choose.method=3
method = data.frame(values=c(3,4),
labels = c("qPCR","metabarcoding"))
choose.method <- switch(choose.method, method$values[method$labels==choose.method])
samples <- suppressWarnings(
lapply(files, function(x) readxl::read_excel(x, sheet = choose.method))
)
files <- list.files(path = path.folder,
pattern = "GOTeDNA-[0-9]{1,2}_data",
full.names = TRUE)
samples <- suppressWarnings(
lapply(files, function(x) readxl::read_excel(x, sheet = choose.method))
)
names(samples) <- files
# remove list elements where sample sheet is empty
samples <- Filter(function(a) any(!is.na(a[["GOTeDNA_ID"]])), samples)
metadata <- lapply(files, function(x)  readxl::read_excel(x, sheet = 2))
names(metadata) <- files
# only read in metadata for which there are sample sheets
metadata <- metadata[names(metadata) %in% names(samples)]
suppressWarnings(
for (i in 1:length(metadata)){
if ((typeof(metadata[[i]]$eventDate) == "double") == TRUE ) {
metadata[[i]]$newDate <- as.character(metadata[[i]]$eventDate)
} else {
ifelse(
((nchar(metadata[[i]]$eventDate) == 5) == TRUE),
(metadata[[i]]$newDate <-
as.character(
as.Date(as.numeric(metadata[[i]]$eventDate), origin = "1899-12-30"))),
(metadata[[i]]$newDate2 <-
as.character(
as.Date(lubridate::parse_date_time(metadata[[i]]$eventDate, orders = "d m y")))))
}
metadata[[i]]$eventDate <- metadata[[i]]$newDate  # merge Date columns
metadata[[i]]$eventDate[!is.na(metadata[[i]]$newDate2)] <- metadata[[i]]$newDate2[!is.na(metadata[[i]]$newDate2)]
metadata[[i]] <- subset(metadata[[i]], is.na(controlType)) # removes field and extraction blanks
}
)
metadata <- lapply(files, function(x)  readxl::read_excel(x, sheet = 2))
names(metadata) <- files
# only read in metadata for which there are sample sheets
metadata <- metadata[names(metadata) %in% names(samples)]
method = data.frame(values=c(3,4),
labels = c("qPCR","metabarcoding"))
choose.method=3
choose.method <- switch(choose.method, method$values[method$labels==choose.method])
View(method)
choose.method ="qPCR"
choose.method <- switch(choose.method, method$values[method$labels==choose.method])
samples <- suppressWarnings(
lapply(files, function(x) readxl::read_excel(x, sheet = choose.method))
)
names(samples) <- files
# remove list elements where sample sheet is empty
samples <- Filter(function(a) any(!is.na(a[["GOTeDNA_ID"]])), samples)
metadata <- lapply(files, function(x)  readxl::read_excel(x, sheet = 2))
names(metadata) <- files
# only read in metadata for which there are sample sheets
metadata <- metadata[names(metadata) %in% names(samples)]
suppressWarnings(
for (i in 1:length(metadata)){
if ((typeof(metadata[[i]]$eventDate) == "double") == TRUE ) {
metadata[[i]]$newDate <- as.character(metadata[[i]]$eventDate)
} else {
ifelse(
((nchar(metadata[[i]]$eventDate) == 5) == TRUE),
(metadata[[i]]$newDate <-
as.character(
as.Date(as.numeric(metadata[[i]]$eventDate), origin = "1899-12-30"))),
(metadata[[i]]$newDate2 <-
as.character(
as.Date(lubridate::parse_date_time(metadata[[i]]$eventDate, orders = "d m y")))))
}
metadata[[i]]$eventDate <- metadata[[i]]$newDate  # merge Date columns
metadata[[i]]$eventDate[!is.na(metadata[[i]]$newDate2)] <- metadata[[i]]$newDate2[!is.na(metadata[[i]]$newDate2)]
metadata[[i]] <- subset(metadata[[i]], is.na(controlType)) # removes field and extraction blanks
}
)
for (k in 1:length(metadata)){
metadata[[k]]$year <- lubridate::year(metadata[[k]]$eventDate)
metadata[[k]]$month <- lubridate::month(metadata[[k]]$eventDate)
}
# match event date to samples
for (j in 1:length(samples)) {
samples[[j]]$date <- metadata[[j]]$eventDate[match(samples[[j]]$eventID, metadata[[j]]$eventID)]
samples[[j]]$ecodistrict <- metadata[[j]]$ecodistrict[match(samples[[j]]$eventID, metadata[[j]]$eventID)] %>%
stringr::str_remove_all( # clean ecodistrict
pattern="(-?[:digit:])")
samples[[j]]$decimalLatitude <- metadata[[j]]$decimalLatitude[match(samples[[j]]$eventID, metadata[[j]]$eventID)]
samples[[j]]$decimalLongitude <- metadata[[j]]$decimalLongitude[match(samples[[j]]$eventID, metadata[[j]]$eventID)]
samples[[j]]$station <- metadata[[j]]$samplingStation[match(samples[[j]]$eventID, metadata[[j]]$eventID)]
samples[[j]]$year <- lubridate::year(samples[[j]]$date)
samples[[j]]$month <- lubridate::month(samples[[j]]$date)
}
samples <- lapply(samples, function(x) {
if(any(colnames(x) %in% "concentration")==TRUE) {
x %>%
rstatix::drop_na(date) %>% # drop lab/field blanks
subset(!kingdom %in% "NA") %>%
dplyr::group_by(eventID) %>%
dplyr::mutate(detected = dplyr::case_when(
concentration > 0 ~ 1,
concentration == 0 ~ 0)) %>% #,
transform(concentration = suppressWarnings(as.numeric(concentration)))
# is.na(quantificationCycle) ~ 0)) %>%#,
#   aboveLOD = dplyr::case_when(
# all(concentration >= pcr_primer_lod)  ~ 1,
#all(concentration < pcr_primer_lod) ~ 0))
} else {
x %>%
rstatix::drop_na(date) %>%
subset(!kingdom %in% "NA") %>%
dplyr::mutate(detected = dplyr::case_when(
organismQuantity != 0 ~ 1,
organismQuantity == 0 ~ 0))
}
}
)
GOTeDNA_df <- do.call(rbind, lapply(samples, function(x) x[,names(x) %in% c("GOTeDNA_ID", "GOTeDNA_version", "eventID",
"target_gene","target_subfragment", "scientificName",
"kingdom", "phylum", "class", "order", "family",
"genus", "date", "ecodistrict", "decimalLatitude", "decimalLongitude",
"station", "year", "month","organismQuantity","concentration", "detected")]))
rownames(GOTeDNA_df) <- NULL
return(GOTeDNA_df)
View(GOTeDNA_df)
test_that("read_data() reads and formats excel sheets", {
expect_equal(read_data(choose.method = "qPCR", path.folder="C:/Users/morrisonme/Documents/R/data/"),
return(GOTeDNA_df))
})
View(GOTeDNA_df)
str(GOTeDNA_df)
test_that("read_data() reads and formats excel sheets", {
expect_equal(read_data(choose.method = "qPCR", path.folder="C:/Users/morrisonme/Documents/R/data/"),
class = data.frame())
})
test_that("read_data() reads and formats excel sheets", {
expect_equal(read_data(choose.method = "qPCR", path.folder="C:/Users/morrisonme/Documents/R/data/"),
class = data.frame(GOTeDNA_df))
})
test_that("read_data() reads and formats excel sheets", {
D_qp <- read_data(choose.method = "qPCR", path.folder="C:/Users/morrisonme/Documents/R/data/")
expect_equal(is.data.frame(D_qp))
})
test_that("read_data() reads and formats excel sheets", {
D_qp <- read_data(choose.method = "qPCR", path.folder="C:/Users/morrisonme/Documents/R/data/")
expect_that(is.data.frame(D_qp))
})
test_that("read_data() reads and formats excel sheets", {
expect_equal(D_qp <- read_data(choose.method = "qPCR", path.folder="C:/Users/morrisonme/Documents/R/data/"),
is.data.frame(D_qp))
})
test_that("read_data() reads and formats excel sheets", {
expect_equal(D_qp <- read_data(choose.method = "qPCR", path.folder="C:/Users/morrisonme/Documents/R/data/"),
class = data.frame(D_qp))
})
test_that("read_data() reads and formats excel sheets", {
expect_equal(D_qp <- read_data(choose.method = "qPCR", path.folder="C:/Users/morrisonme/Documents/R/data/"),
data.frame(D_qp))
})
test_that("read_data() reads and formats excel sheets", {
expect_equal(D_qp <- read_data(choose.method = "qPCR", path.folder="C:/Users/morrisonme/Documents/R/data/"),
data.frame(D_qp))
expect_equal(D_mb <- read_data(choose.method = "metabarcoding", path.folder="C:/Users/morrisonme/Documents/R/data/"),
data.frame(D_mb))
})
test_that("read_data() reads and formats excel sheets", {
expect_equal(D_qp <- read_data(choose.method = "qPCR", path.folder="C:/Users/morrisonme/Documents/R/data/"),
data.frame(D_qp))
expect_equal(D_mb <- read_data(choose.method = "metabarcoding", path.folder="C:/Users/morrisonme/Documents/R/data/"),
tibble(D_mb))
})
test_that("read_data() reads and formats excel sheets", {
expect_equal(D_qp <- read_data(choose.method = "qPCR", path.folder="C:/Users/morrisonme/Documents/R/data/"),
data.frame(D_qp))
expect_equal(D_mb <- read_data(choose.method = "metabarcoding", path.folder="C:/Users/morrisonme/Documents/R/data/"),
dplyr::tibble(D_mb))
})
test_that("read_data() reads and formats excel sheets", {
expect_equal(D_qp <- read_data(choose.method = "qPCR", path.folder="C:/Users/morrisonme/Documents/R/data/"),
data.frame(D_qp))
expect_equal(D_mb <- read_data(choose.method = "metabarcoding", path.folder="C:/Users/morrisonme/Documents/R/data/"),
dplyr::tibble(D_mb))
expect_equal(D_qp <- read_data(choose.method = "qPCR", path.folder=NULL),
data.frame(D_qp))
})
path.folder=NULL
list.files(path = path.folder,
pattern = "GOTeDNA-[0-9]{1,2}_data",
full.names = TRUE)
list.files(path = path.folder,
pattern = "/GOTeDNA-[0-9]{1,2}_data",
full.names = TRUE)
if (is.null(path.folder)) path.folder <- getwd()
list.files(path = path.folder,
pattern = "/GOTeDNA-[0-9]{1,2}_data",
full.names = TRUE)
list.files(path = path.folder,
pattern = "GOTeDNA-[0-9]{1,2}_data",
full.names = TRUE)
test_that("read_data() reads and formats excel sheets", {
expect_equal(D_qp <- read_data(choose.method = "qPCR", path.folder="C:/Users/morrisonme/Documents/R/data/"),
data.frame(D_qp))
# expect_equal(D_mb <- read_data(choose.method = "metabarcoding", path.folder="C:/Users/morrisonme/Documents/R/data/"),
#             dplyr::tibble(D_mb))
expect_equal(D_qp <- read_data(choose.method = "qPCR", path.folder=NULL),
data.frame(D_qp))
})
document()
?read_data
load_all()
read_data("qPCR")
read_data("qPCR", path.folder=NULL)
git clone https://github.com/mkmor/GOTeDNA.git
usethis::create_from_github("https://github.com/mkmor/GOTeDNA.git", destdir="C:/Users/morrisonme/Documents/R/GOTeDNA")
usethis::create_from_github("https://github.com/mkmor/GOTeDNA.git", destdir="C:/Users/morrisonme/Documents/R/GOTeDNA", auth_token = "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")
gh::gh_whoami("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")
gh_token_help()
gh_token_help("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")
gitcreds::gitcreds_set()
use_github()
rlang::last_trace()
git_default_branch("main")
git_default_branch()
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
gitcreds::gitcreds_get()
git_default_branch()
gitcreds::git_default_branch()
load_all()
