diff_y1 = dplyr::case_when(             # ifelse
month == next_ | month == prev_ ~ 0,
TRUE ~ month-prev_
))
multmonth = multmonth[,!names(multmonth) %in% c("prev_","next_")]
multmonth$diff_y1[is.na(multmonth$diff_y1)] = 0
# selects species with consecutive months >= threshold
consecmonth1 <- multmonth %>%
dplyr::filter(length(id) == sum(diff_y1)+1) #%>%
# selects species with consecutive months being December-January >= threshold
# keep rows with diff_y1 = 11, because that could mean Dec/Jan are consecutive
# if diff_y1 = 11, keep the row before it.
# if diff_y1 = 1, keep row before
consecmonth2 = multmonth %>%
dplyr::filter(length(id) == 2 & sum(diff_y1)==11) #%>%
# all of the species with consecutive windows AND single month window
consec.det = dplyr::bind_rows(onemonth,consecmonth1,consecmonth2)
# create df where species have no discernible window (for now, this means more than one non-consecutive period)
optwin = consec.det[,!names(consec.det) %in% "diff_y1"] %>%
dplyr::mutate(window = "inwindow")
# gives the period and length of optimal detection window
opt_sampling = optwin %>%
dplyr::summarise(length = length(month),
threshold = threshold,
period = paste0(month.abb[min(month)],"-",month.abb[max(month)]),
mid_month = median(month))
inwindow <- optwin %>%
dplyr::group_by(id, ecodistrict, window) %>%
dplyr::summarise(detect = sum(detect, na.rm=TRUE),
nondetect = sum(nondetect, na.rm=TRUE))
# filter out all of the species that have a window from the dataset
nowin <- var.df %>%
dplyr::anti_join(optwin, by=c("id","month")) %>%
dplyr::mutate(window = "outsidewindow")
outsidewindow <- nowin %>%
dplyr::group_by(id, ecodistrict, window) %>%
dplyr::summarise(detect = sum(detect, na.rm=TRUE),
nondetect = sum(nondetect, na.rm=TRUE))
window_sum <- dplyr::bind_rows(inwindow,outsidewindow) %>%
split(.$id)
both_in_out <- window_sum[sapply(window_sum, function(x) nrow(x) == 2)]
# Fisher's exact test to compare detection probability within/outside the window for each species and primer
fshTest <- vector('list',length(names(both_in_out)))
names(fshTest) <- names(both_in_out)
for (i in names(both_in_out)) {
f <- fisher.test(matrix(c(both_in_out[[i]]$detect[both_in_out[[i]]$window=="inwindow"],
both_in_out[[i]]$detect[both_in_out[[i]]$window=="outsidewindow"],
both_in_out[[i]]$nondetect[both_in_out[[i]]$window=="inwindow"],
both_in_out[[i]]$nondetect[both_in_out[[i]]$window=="outsidewindow"]),
nrow = 2))
fshTest[[i]] <- data.frame(
"odds ratio" = f$estimate, "p value" = scales::pvalue(f$p.value),
"Lower CI" = f$conf.int[1], "Upper CI" = f$conf.int[2],
check.names = FALSE)
}
fshDF <- do.call(rbind, fshTest)
fshDF$id <- rownames(fshDF)
fshDF <- dplyr::full_join(fshDF,opt_sampling, by="id")
View(outsidewindow)
View(window_sum)
View(onemonth)
View(nowin)
both_in_out
typeof(both_in_out)
class(both_in_out)
if(length(both_in_out) != 0){
for (i in names(both_in_out)) {
f <- fisher.test(matrix(c(both_in_out[[i]]$detect[both_in_out[[i]]$window=="inwindow"],
both_in_out[[i]]$detect[both_in_out[[i]]$window=="outsidewindow"],
both_in_out[[i]]$nondetect[both_in_out[[i]]$window=="inwindow"],
both_in_out[[i]]$nondetect[both_in_out[[i]]$window=="outsidewindow"]),
nrow = 2))
fshTest[[i]] <- data.frame(
"odds ratio" = f$estimate, "p value" = scales::pvalue(f$p.value),
"Lower CI" = f$conf.int[1], "Upper CI" = f$conf.int[2],
check.names = FALSE)
}
fshDF <- do.call(rbind, fshTest)
fshDF$id <- rownames(fshDF)
fshDF <- dplyr::full_join(fshDF,opt_sampling, by="id")
if (lengths(strsplit(fshDF$id[1], ";"))==4) {
fshDF[c("GOTeDNA_ID","species","primer","year")] <- stringr::str_split_fixed(fshDF$id, ";", 4)
} else {
fshDF[c("GOTeDNA_ID","species","primer")] <- stringr::str_split_fixed(fshDF$id, ";", 3)
}
fshDF <- fshDF %>%
dplyr::left_join(unique(data[,c("phylum","class","order","family","genus","scientificName")]),
by=c("species"="scientificName"),
multiple="first")  %>%
dplyr::mutate(confidence = dplyr::case_when(
`p value` == "<0.001" ~ "Very high",
`p value` < "0.01" ~ "High",
`p value` < "0.05" ~ "Medium",
`p value` >= "0.05" ~ "Low",
is.na(`p value`) == TRUE ~ "No optimal period"
))
fshDF <- fshDF %>%
dplyr::select(-"id",-"mid_month") %>%
dplyr::select(-"odds ratio",-"p value",-"Lower CI",-"Upper CI",-"confidence", dplyr::everything())
return(fshDF)
} else {
return("No optimal detection window")
}
load_all()
calc_window(D_mb,"Scotian Shelf","90",show.variation = "within_year", species.name="Acartia hudsonica")
dplyr::last_dplyr_warnings()
load_all()
calc_window(D_mb,"Scotian Shelf","90",show.variation = "within_year", species.name="Acartia hudsonica")
use_test("calc_window")
calc_window(D_mb,"Scotian Shelf","90",show.variation = "within_year", species.name="Acartia longiremis")
rlang::last_trace()
show.variation = "within.year"
species.name = "Acartia longiremis"
threshold = "90"
data("D_mb")
var.lst <- list("within_year"= Pscaled_agg)#,
var.df <- dplyr::filter(var.lst[[show.variation]], species %in% species.name)
data("Pscaled_agg")
var.df <- dplyr::filter(var.lst[[show.variation]], species %in% species.name)
show.variation = "within_year"
var.df <- dplyr::filter(var.lst[[show.variation]], species %in% species.name)
thresh <- data.frame(values=c(0.49999,0.54999,0.59999,0.64999,0.69999,
0.74999, 0.79999, 0.84999, 0.89999, 0.94999),
labels = c("50","55","60","65","70","75","80","85","90","95"))
thresh.value <- switch(threshold, thresh$values[thresh$labels==threshold])
# selects species with only a single month >= threshold
onemonth <- var.df[var.df$fill >= thresh.value,] %>%
dplyr::filter(dplyr::n() == 1)
# selects species with several months >= threshold
multmonth <- suppressMessages(
dplyr::anti_join(var.df[var.df$fill >= thresh.value,], onemonth)) %>%
dplyr::mutate(prev_ = dplyr::lag(month),                 # the previous item
next_ = dplyr::lead(month),                # the next item
diff_y1 = dplyr::case_when(             # ifelse
month == next_ | month == prev_ ~ 0,
TRUE ~ month-prev_
))
multmonth = multmonth[,!names(multmonth) %in% c("prev_","next_")]
multmonth$diff_y1[is.na(multmonth$diff_y1)] = 0
# selects species with consecutive months >= threshold
consecmonth1 <- multmonth %>%
dplyr::filter(length(id) == sum(diff_y1)+1) #%>%
# selects species with consecutive months being December-January >= threshold
# keep rows with diff_y1 = 11, because that could mean Dec/Jan are consecutive
# if diff_y1 = 11, keep the row before it.
# if diff_y1 = 1, keep row before
consecmonth2 = multmonth %>%
dplyr::filter(length(id) == 2 & sum(diff_y1)==11) #%>%
# all of the species with consecutive windows AND single month window
consec.det = dplyr::bind_rows(onemonth,consecmonth1,consecmonth2)
# create df where species have no discernible window (for now, this means more than one non-consecutive period)
optwin = consec.det[,!names(consec.det) %in% "diff_y1"] %>%
dplyr::mutate(window = "inwindow")
inwindow <- optwin %>%
dplyr::group_by(id, ecodistrict, window) %>%
dplyr::summarise(detect = sum(detect, na.rm=TRUE),
nondetect = sum(nondetect, na.rm=TRUE))
# filter out all of the species that have a window from the dataset
nowin <- var.df %>%
dplyr::anti_join(optwin, by=c("id","month")) %>%
dplyr::mutate(window = "outsidewindow")
outsidewindow <- nowin %>%
dplyr::group_by(id, ecodistrict, window) %>%
dplyr::summarise(detect = sum(detect, na.rm=TRUE),
nondetect = sum(nondetect, na.rm=TRUE))
window_sum <- dplyr::bind_rows(inwindow,outsidewindow) %>%
split(.$id)
both_in_out <- window_sum[sapply(window_sum, function(x) nrow(x) == 2)]
# Fisher's exact test to compare detection probability within/outside the window for each species and primer
fshTest <- vector('list',length(names(both_in_out)))
names(fshTest) <- names(both_in_out)
if(length(both_in_out) != 0){
# gives the period and length of optimal detection window
opt_sampling = optwin %>%
dplyr::summarise(length = length(month),
threshold = threshold,
period = paste0(month.abb[min(month)],"-",month.abb[max(month)]),
mid_month = median(month))
for (i in names(both_in_out)) {
f <- fisher.test(matrix(c(both_in_out[[i]]$detect[both_in_out[[i]]$window=="inwindow"],
both_in_out[[i]]$detect[both_in_out[[i]]$window=="outsidewindow"],
both_in_out[[i]]$nondetect[both_in_out[[i]]$window=="inwindow"],
both_in_out[[i]]$nondetect[both_in_out[[i]]$window=="outsidewindow"]),
nrow = 2))
fshTest[[i]] <- data.frame(
"odds ratio" = f$estimate, "p value" = scales::pvalue(f$p.value),
"Lower CI" = f$conf.int[1], "Upper CI" = f$conf.int[2],
check.names = FALSE)
}
fshDF <- do.call(rbind, fshTest)
fshDF$id <- rownames(fshDF)
fshDF <- dplyr::full_join(fshDF,opt_sampling, by="id")
if (lengths(strsplit(fshDF$id[1], ";"))==4) {
fshDF[c("GOTeDNA_ID","species","primer","year")] <- stringr::str_split_fixed(fshDF$id, ";", 4)
} else {
fshDF[c("GOTeDNA_ID","species","primer")] <- stringr::str_split_fixed(fshDF$id, ";", 3)
}
fshDF <- fshDF %>%
dplyr::left_join(unique(data[,c("phylum","class","order","family","genus","scientificName")]),
by=c("species"="scientificName"),
multiple="first")  %>%
dplyr::mutate(confidence = dplyr::case_when(
`p value` == "<0.001" ~ "Very high",
`p value` < "0.01" ~ "High",
`p value` < "0.05" ~ "Medium",
`p value` >= "0.05" ~ "Low",
is.na(`p value`) == TRUE ~ "No optimal period"
))
fshDF <- fshDF %>%
dplyr::select(-"id",-"mid_month") %>%
dplyr::select(-"odds ratio",-"p value",-"Lower CI",-"Upper CI",-"confidence", dplyr::everything())
return(fshDF)
} else {
return("No optimal detection window")
}
View(opt_sampling)
View(optwin)
View(inwindow)
View(nowin)
View(outsidewindow)
View(window_sum)
View(both_in_out)
View(fshTest)
opt_sampling = optwin %>%
dplyr::summarise(length = length(month),
threshold = threshold,
period = paste0(month.abb[min(month)],"-",month.abb[max(month)]),
mid_month = median(month))
View(opt_sampling)
opt_sampling = optwin %>%
dplyr::summarise(id = id,
length = length(month),
threshold = threshold,
period = paste0(month.abb[min(month)],"-",month.abb[max(month)]),
mid_month = median(month))
opt_sampling = optwin %>%
dplyr::summarise(id = unique(id),
length = length(month),
threshold = threshold,
period = paste0(month.abb[min(month)],"-",month.abb[max(month)]),
mid_month = median(month))
if(length(both_in_out) != 0){
# gives the period and length of optimal detection window
opt_sampling = optwin %>%
dplyr::summarise(id = unique(id),
length = length(month),
threshold = threshold,
period = paste0(month.abb[min(month)],"-",month.abb[max(month)]),
mid_month = median(month))
for (i in names(both_in_out)) {
f <- fisher.test(matrix(c(both_in_out[[i]]$detect[both_in_out[[i]]$window=="inwindow"],
both_in_out[[i]]$detect[both_in_out[[i]]$window=="outsidewindow"],
both_in_out[[i]]$nondetect[both_in_out[[i]]$window=="inwindow"],
both_in_out[[i]]$nondetect[both_in_out[[i]]$window=="outsidewindow"]),
nrow = 2))
fshTest[[i]] <- data.frame(
"odds ratio" = f$estimate, "p value" = scales::pvalue(f$p.value),
"Lower CI" = f$conf.int[1], "Upper CI" = f$conf.int[2],
check.names = FALSE)
}
fshDF <- do.call(rbind, fshTest)
fshDF$id <- rownames(fshDF)
fshDF <- dplyr::full_join(fshDF,opt_sampling, by="id")
if (lengths(strsplit(fshDF$id[1], ";"))==4) {
fshDF[c("GOTeDNA_ID","species","primer","year")] <- stringr::str_split_fixed(fshDF$id, ";", 4)
} else {
fshDF[c("GOTeDNA_ID","species","primer")] <- stringr::str_split_fixed(fshDF$id, ";", 3)
}
fshDF <- fshDF %>%
dplyr::left_join(unique(data[,c("phylum","class","order","family","genus","scientificName")]),
by=c("species"="scientificName"),
multiple="first")  %>%
dplyr::mutate(confidence = dplyr::case_when(
`p value` == "<0.001" ~ "Very high",
`p value` < "0.01" ~ "High",
`p value` < "0.05" ~ "Medium",
`p value` >= "0.05" ~ "Low",
is.na(`p value`) == TRUE ~ "No optimal period"
))
fshDF <- fshDF %>%
dplyr::select(-"id",-"mid_month") %>%
dplyr::select(-"odds ratio",-"p value",-"Lower CI",-"Upper CI",-"confidence", dplyr::everything())
return(fshDF)
} else {
return("No optimal detection window")
}
data = D_mb
if(length(both_in_out) != 0){
# gives the period and length of optimal detection window
opt_sampling = optwin %>%
dplyr::summarise(id = unique(id),
length = length(month),
threshold = threshold,
period = paste0(month.abb[min(month)],"-",month.abb[max(month)]),
mid_month = median(month))
for (i in names(both_in_out)) {
f <- fisher.test(matrix(c(both_in_out[[i]]$detect[both_in_out[[i]]$window=="inwindow"],
both_in_out[[i]]$detect[both_in_out[[i]]$window=="outsidewindow"],
both_in_out[[i]]$nondetect[both_in_out[[i]]$window=="inwindow"],
both_in_out[[i]]$nondetect[both_in_out[[i]]$window=="outsidewindow"]),
nrow = 2))
fshTest[[i]] <- data.frame(
"odds ratio" = f$estimate, "p value" = scales::pvalue(f$p.value),
"Lower CI" = f$conf.int[1], "Upper CI" = f$conf.int[2],
check.names = FALSE)
}
fshDF <- do.call(rbind, fshTest)
fshDF$id <- rownames(fshDF)
fshDF <- dplyr::full_join(fshDF,opt_sampling, by="id")
if (lengths(strsplit(fshDF$id[1], ";"))==4) {
fshDF[c("GOTeDNA_ID","species","primer","year")] <- stringr::str_split_fixed(fshDF$id, ";", 4)
} else {
fshDF[c("GOTeDNA_ID","species","primer")] <- stringr::str_split_fixed(fshDF$id, ";", 3)
}
fshDF <- fshDF %>%
dplyr::left_join(unique(data[,c("phylum","class","order","family","genus","scientificName")]),
by=c("species"="scientificName"),
multiple="first")  %>%
dplyr::mutate(confidence = dplyr::case_when(
`p value` == "<0.001" ~ "Very high",
`p value` < "0.01" ~ "High",
`p value` < "0.05" ~ "Medium",
`p value` >= "0.05" ~ "Low",
is.na(`p value`) == TRUE ~ "No optimal period"
))
fshDF <- fshDF %>%
dplyr::select(-"id",-"mid_month") %>%
dplyr::select(-"odds ratio",-"p value",-"Lower CI",-"Upper CI",-"confidence", dplyr::everything())
return(fshDF)
} else {
return("No optimal detection window")
}
if(length(both_in_out) != 0){
# gives the period and length of optimal detection window
opt_sampling = optwin %>%
dplyr::summarise(id = unique(id),
length = length(month),
threshold = threshold,
period = paste0(month.abb[min(month)],"-",month.abb[max(month)]),
mid_month = median(month))
for (i in names(both_in_out)) {
f <- fisher.test(matrix(c(both_in_out[[i]]$detect[both_in_out[[i]]$window=="inwindow"],
both_in_out[[i]]$detect[both_in_out[[i]]$window=="outsidewindow"],
both_in_out[[i]]$nondetect[both_in_out[[i]]$window=="inwindow"],
both_in_out[[i]]$nondetect[both_in_out[[i]]$window=="outsidewindow"]),
nrow = 2))
fshTest[[i]] <- data.frame(
"odds ratio" = f$estimate, "p value" = scales::pvalue(f$p.value),
"Lower CI" = f$conf.int[1], "Upper CI" = f$conf.int[2],
check.names = FALSE)
}
fshDF <- do.call(rbind, fshTest)
fshDF$id <- rownames(fshDF)
fshDF <- dplyr::full_join(fshDF,opt_sampling, by="id")
if (lengths(strsplit(fshDF$id[1], ";"))==4) {
fshDF[c("GOTeDNA_ID","species","primer","year")] <- stringr::str_split_fixed(fshDF$id, ";", 4)
} else {
fshDF[c("GOTeDNA_ID","species","primer")] <- stringr::str_split_fixed(fshDF$id, ";", 3)
}
fshDF <- fshDF %>%
dplyr::left_join(unique(data[,c("phylum","class","order","family","genus","scientificName")]),
by=c("species"="scientificName"),
multiple="first")  %>%
dplyr::mutate(confidence = dplyr::case_when(
`p value` == "<0.001" ~ "Very high",
`p value` < "0.01" ~ "High",
`p value` < "0.05" ~ "Medium",
`p value` >= "0.05" ~ "Low",
is.na(`p value`) == TRUE ~ "No optimal period"
))
fshDF <- fshDF %>%
dplyr::select(-"id",-"mid_month") %>%
dplyr::select(-"odds ratio",-"p value",-"Lower CI",-"Upper CI",-"confidence", dplyr::everything())
return(fshDF)
}
if(length(both_in_out) != 0){
# gives the period and length of optimal detection window
opt_sampling = optwin %>%
dplyr::summarise(id = unique(id),
length = length(month),
threshold = threshold,
period = paste0(month.abb[min(month)],"-",month.abb[max(month)]),
mid_month = median(month))
for (i in names(both_in_out)) {
f <- fisher.test(matrix(c(both_in_out[[i]]$detect[both_in_out[[i]]$window=="inwindow"],
both_in_out[[i]]$detect[both_in_out[[i]]$window=="outsidewindow"],
both_in_out[[i]]$nondetect[both_in_out[[i]]$window=="inwindow"],
both_in_out[[i]]$nondetect[both_in_out[[i]]$window=="outsidewindow"]),
nrow = 2))
fshTest[[i]] <- data.frame(
"odds ratio" = f$estimate, "p value" = scales::pvalue(f$p.value),
"Lower CI" = f$conf.int[1], "Upper CI" = f$conf.int[2],
check.names = FALSE)
}
fshDF <- do.call(rbind, fshTest)
fshDF$id <- rownames(fshDF)
fshDF <- dplyr::full_join(fshDF,opt_sampling, by="id")
if (lengths(strsplit(fshDF$id[1], ";"))==4) {
fshDF[c("GOTeDNA_ID","species","primer","year")] <- stringr::str_split_fixed(fshDF$id, ";", 4)
} else {
fshDF[c("GOTeDNA_ID","species","primer")] <- stringr::str_split_fixed(fshDF$id, ";", 3)
}
fshDF <- fshDF %>%
dplyr::left_join(unique(data[,c("phylum","class","order","family","genus","scientificName")]),
by=c("species"="scientificName"),
multiple="first")  %>%
dplyr::mutate(confidence = dplyr::case_when(
`p value` == "<0.001" ~ "Very high",
`p value` < "0.01" ~ "High",
`p value` < "0.05" ~ "Medium",
`p value` >= "0.05" ~ "Low",
is.na(`p value`) == TRUE ~ "No optimal period"
))
fshDF <- fshDF %>%
dplyr::select(-"id",-"mid_month") %>%
dplyr::select(-"odds ratio",-"p value",-"Lower CI",-"Upper CI",-"confidence", dplyr::everything())
print(fshDF)
}
View(fshDF)
str(fshDF)
if(length(both_in_out) != 0){
# gives the period and length of optimal detection window
opt_sampling = optwin %>%
dplyr::summarise(id = unique(id),
ecodistrict = unique(ecodistrict),
length = length(month),
threshold = threshold,
period = paste0(month.abb[min(month)],"-",month.abb[max(month)]),
mid_month = median(month))
for (i in names(both_in_out)) {
f <- fisher.test(matrix(c(both_in_out[[i]]$detect[both_in_out[[i]]$window=="inwindow"],
both_in_out[[i]]$detect[both_in_out[[i]]$window=="outsidewindow"],
both_in_out[[i]]$nondetect[both_in_out[[i]]$window=="inwindow"],
both_in_out[[i]]$nondetect[both_in_out[[i]]$window=="outsidewindow"]),
nrow = 2))
fshTest[[i]] <- data.frame(
"odds ratio" = f$estimate, "p value" = scales::pvalue(f$p.value),
"Lower CI" = f$conf.int[1], "Upper CI" = f$conf.int[2],
check.names = FALSE)
}
fshDF <- do.call(rbind, fshTest)
fshDF$id <- rownames(fshDF)
fshDF <- dplyr::full_join(fshDF,opt_sampling, by="id")
if (lengths(strsplit(fshDF$id[1], ";"))==4) {
fshDF[c("GOTeDNA_ID","species","primer","year")] <- stringr::str_split_fixed(fshDF$id, ";", 4)
} else {
fshDF[c("GOTeDNA_ID","species","primer")] <- stringr::str_split_fixed(fshDF$id, ";", 3)
}
fshDF <- fshDF %>%
dplyr::left_join(unique(data[,c("phylum","class","order","family","genus","scientificName")]),
by=c("species"="scientificName"),
multiple="first")  %>%
dplyr::mutate(confidence = dplyr::case_when(
`p value` == "<0.001" ~ "Very high",
`p value` < "0.01" ~ "High",
`p value` < "0.05" ~ "Medium",
`p value` >= "0.05" ~ "Low",
is.na(`p value`) == TRUE ~ "No optimal period"
))
fshDF <- fshDF %>%
dplyr::select(-"id",-"mid_month") %>%
dplyr::select(-"odds ratio",-"p value",-"Lower CI",-"Upper CI",-"confidence", dplyr::everything())
print(fshDF)
}
calc_window(D_mb,"Scotian Shelf","90",show.variation = "within_year", species.name="Acartia longiremis")
load_all()
calc_window(D_mb,"Scotian Shelf","90",show.variation = "within_year", species.name="Acartia longiremis")
scale_prob_by_year(D_mb, "Scotian Shelf")
Pscaled_yr = scale_prob_by_year(D_mb, "Scotian Shelf")
save(Pscaled_yr, "Pscaled_yr.rda")
save(Pscaled_yr, file="Pscaled_yr.rda")
calc_window(D_mb,"Scotian Shelf","90",show.variation = "within_year", species.name="Acartia longiremis")
expect_equal(win_df <- calc_window(data = D_mb, ecodistrict.select = "Scotian Shelf", threshold = "90",
show.variation = "within_year", species.name="Acartia longiremis"),
data.frame(win_df))
View(win_df)
str(win_df)
typeof(win_df)
class(win_df)
expect_s3_class(win_df <- calc_window(data = D_mb, ecodistrict.select = "Scotian Shelf", threshold = "90",
show.variation = "within_year", species.name="Acartia longiremis"),
data.frame(win_df))
expect_equal(win_df <- calc_window(data = D_mb, ecodistrict.select = "Scotian Shelf", threshold = "90",
show.variation = "within_year", species.name="Acartia longiremis"),
data.frame())
expect_equal(win_df <- calc_window(data = D_mb, ecodistrict.select = "Scotian Shelf", threshold = "90",
show.variation = "within_year", species.name="Acartia longiremis"),
as.data.frame(win_df))
expect_error(calc_window(data = D_mb, ecodistrict.select = "Bay of Fundy", threshold = "90",
show.variation = "within_year", species.name="Acartia longiremis"),
"Ecodistrict not found in data")
expect_error(calc_window(data = D_mb, ecodistrict.select = "Scotian Shelf", threshold = "90",
show.variation = "within_year", species.name="A. longiremis"),
"Species not found in data")
expect_error(calc_window(data = D_mb, ecodistrict.select = "Scotian Shelf", threshold = "90",
show.variation = "within_year", species.name="A. longiremis"),
"Species not found in data")
load_all()
expect_error(calc_window(data = D_mb, ecodistrict.select = "Scotian Shelf", threshold = "90",
show.variation = "within_year", species.name="A. longiremis"),
"Species not found in data")
expect_error(calc_window(data = D_mb, ecodistrict.select = "Bay of Fundy", threshold = "90",
show.variation = "within_year", species.name="Acartia longiremis"),
"Ecodistrict not found in data")
expect_equal(win_df <- calc_window(data = D_mb, ecodistrict.select = "Scotian Shelf", threshold = "90",
show.variation = "within_year", species.name="Acartia longiremis"),
as.data.frame(win_df))
expect_equal(calc_window(data = D_mb, ecodistrict.select = "Scotian Shelf", threshold = "90",
show.variation = "within_year", species.name="Acartia hudsonica"),
"No optimal detection window")
document()
check()
