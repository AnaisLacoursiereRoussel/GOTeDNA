do.call(what = rbind) |>
dplyr::mutate(
id = rep(names(CPscaled$newP_agg), each = 12)
) |>
dplyr::select(id, ecodistrict, month, detect, nondetect, scaleP) |>
dplyr::tibble()
row.names(DFmo) <- NULL
DFmo[c("GOTeDNA_ID", "species", "primer")] <- stringr::str_split_fixed(DFmo$id, ";", 3)
# Interpolate missing months
DFmo$fill <- NA # add column
for (species in unique(DFmo$id)) {
DF1 <- DFmo[DFmo$id == species, ]
# then add code for interpolation that starts with DF2 = .....
# add dataframe above and below to help will fills for jan and dec. Needed to have 4 copyies because of max function used below
DF2 <- rbind(
cbind(DF1, data.frame(G = 1)),
cbind(DF1, data.frame(G = 2)),
cbind(DF1, data.frame(G = 3)),
cbind(DF1, data.frame(G = 4))
)
DF2$fill <- DF2$scaleP
# which months are NA and define groups with sequential NAs
month_na_id <- which(is.na(DF2$scaleP))
nagroups <- cumsum(c(1, abs(month_na_id[-length(month_na_id)] - month_na_id[-1]) > 1))
# identify which NA groups are in G = 2 or 3 (ignore 1 and 2)
nagroupsG <- list()
for (i in unique(nagroups)) {
nagroupsG[[i]] <- max(DF2$G[month_na_id[which(nagroups == i)]])
}
nagroupsGv <- unlist(nagroupsG)
nagroupsf <- which(nagroupsGv %in% 2:3)
# loop over final NA groups and fill in using average
for (i in unique(nagroupsf)) {
DF2$fill[month_na_id[which(nagroups == i)]] <- (DF2$scaleP[min(month_na_id[which(nagroups == i)]) - 1] + DF2$scaleP[max(month_na_id[which(nagroups == i)]) + 1]) / 2
}
# then put values from DF3 back into DF$sp.pr. This assumes that the months are all in the correct order (jan to dec) in DF3 and test_interp
# DF3 is final DF with fills
DF3 <- DF2[DF2$G == 2, ]
DFmo$fill[DFmo$id == species] <- DF3$fill
}
View(DFmo)
DFmo <- DFmo %>%
dplyr::left_join(unique(data[, c("phylum", "class", "order", "family", "genus", "scientificName")]),
by = c("species" = "scientificName"),
multiple = "first"
)
DFyr <- DFyr %>%
dplyr::left_join(unique(data[, c("phylum", "class", "order", "family", "genus", "scientificName")]),
by = c("species" = "scientificName"),
multiple = "first"
)
list(Pscaled_month = DFmo, Pscaled_year = DFyr)
newdf = scale_newprob(D_mb_ex, "Scotian Shelf", newprob)
View(newdf)
document()
scaledprobs = newddf
scaledprobs = newdf
View(scaledprobs)
species.name = "Acartia longiremis"
month.df <- dplyr::filter(scaledprobs$Pscaled_month, species %in% species.name)
year.df <- dplyr::filter(scaledprobs$Pscaled_year, species %in% species.name)
lapply(scaledprobs, function(x) dplyr::filter(species %in% species.name))
lapply(scaledprobs, function(x) dplyr::filter(species == species.name))
lapply(scaledprobs, function(x) dplyr::filter(x, species == species.name))
df <- lapply(scaledprobs, function(x)
dplyr::filter(x,
species %in% species.name))
View(df)
lapply(df, function(x) {
x[x$fill >= thresh.value, ] %>%
dplyr::filter(
dplyr::n() == 1)
})
thresh.value = "75"
thresh.value <- switch(threshold,
thresh$values[thresh$labels == threshold]
)
threshold = "75"
thresh.value <- switch(threshold,
thresh$values[thresh$labels == threshold]
)
thresh_slc <- seq(50, 95, 5) %>% as.character()
thresh <- data.frame(
values = c(
0.49999, 0.54999, 0.59999, 0.64999, 0.69999,
0.74999, 0.79999, 0.84999, 0.89999, 0.94999
),
labels = thresh_slc
)
thresh.value <- switch(threshold,
thresh$values[thresh$labels == threshold]
)
lapply(df, function(x) {
x[x$fill >= thresh.value, ] %>%
dplyr::filter(
dplyr::n() == 1)
})
onemonth <- lapply(df, function(x) {
x[x$fill >= thresh.value, ] %>%
dplyr::filter(
dplyr::n() == 1)
})
mapply(df, function(x) {
suppressMessages(
dplyr::anti_join(x[x$fill >= thresh.value, ], onemonth)
) %>%
dplyr::mutate(
prev_ = dplyr::lag(month), # the previous item
next_ = dplyr::lead(month), # the next item
diff_y1 = dplyr::case_when( # ifelse
month == next_ | month == prev_ ~ 0,
TRUE ~ month - prev_
)
)
})
mapply(df, function(x) {
suppressMessages(
dplyr::anti_join(x[x$fill >= thresh.value, ], onemonth)
) })
lapply(scaledprobs, function(x)
dplyr::filter(x,
species %in% species.name &
fill >= thresh.value))
df <- lapply(scaledprobs, function(x)
dplyr::filter(x,
species %in% species.name &
fill >= thresh.value))
onemonth <- lapply(df, function(x) {
x %>%
dplyr::filter(
dplyr::n() == 1
)
})
View(onemonth)
mapply(df, function(x) {
suppressMessages(
dplyr::anti_join(x, onemonth)
) %>%
dplyr::mutate(
prev_ = dplyr::lag(month), # the previous item
next_ = dplyr::lead(month), # the next item
diff_y1 = dplyr::case_when( # ifelse
month == next_ | month == prev_ ~ 0,
TRUE ~ month - prev_
)
)
})
mapply(function(x, y) {
suppressMessages(
dplyr::anti_join(df, onemonth)
) %>%
dplyr::mutate(
prev_ = dplyr::lag(month), # the previous item
next_ = dplyr::lead(month), # the next item
diff_y1 = dplyr::case_when( # ifelse
month == next_ | month == prev_ ~ 0,
TRUE ~ month - prev_
)
)
})
mapply(function(x, y) {
suppressMessages(
dplyr::anti_join(df, onemonth)
) %>%
dplyr::mutate(
prev_ = dplyr::lag(month), # the previous item
next_ = dplyr::lead(month), # the next item
diff_y1 = dplyr::case_when( # ifelse
month == next_ | month == prev_ ~ 0,
TRUE ~ month - prev_
)
)
}, MoreArgs = list(x=df, y=onemonth))
multmonth <- mapply(function(x, y) {
suppressMessages(
dplyr::anti_join(df, onemonth)
) %>%
dplyr::mutate(
prev_ = dplyr::lag(month), # the previous item
next_ = dplyr::lead(month), # the next item
diff_y1 = dplyr::case_when( # ifelse
month == next_ | month == prev_ ~ 0,
TRUE ~ month - prev_
)
)
}, MoreArgs = list(x=df, y=onemonth))
mapply(function(x, y) {
suppressMessages(
dplyr::anti_join(df, onemonth)
) %>%
dplyr::mutate(
prev_ = dplyr::lag(month), # the previous item
next_ = dplyr::lead(month), # the next item
diff_y1 = dplyr::case_when( # ifelse
month == next_ | month == prev_ ~ 0,
TRUE ~ month - prev_
)
)
}, df, onemonth)
mapply(function(x, y) {
suppressMessages(
dplyr::anti_join(x, y)
) %>%
dplyr::mutate(
prev_ = dplyr::lag(month), # the previous item
next_ = dplyr::lead(month), # the next item
diff_y1 = dplyr::case_when( # ifelse
month == next_ | month == prev_ ~ 0,
TRUE ~ month - prev_
)
)
}, df, onemonth)
multmonth <- mapply(function(x, y) {
suppressMessages(
dplyr::anti_join(x, y)
) %>%
dplyr::mutate(
prev_ = dplyr::lag(month), # the previous item
next_ = dplyr::lead(month), # the next item
diff_y1 = dplyr::case_when( # ifelse
month == next_ | month == prev_ ~ 0,
TRUE ~ month - prev_
)
)
},
df,
onemonth
)
View(multmonth)
lapply(multmonth, function(x)
dplyr::filter(!names(multmonth) %in% c("prev_", "next_")))
lapply(multmonth, function(x)
dplyr::filter(x, !names(multmonth) %in% c("prev_", "next_")))
lapply(multmonth, function(x)
dplyr::select(x, c(-prev_, -next_)))
multmonth <- lapply(multmonth, function(x)
dplyr::select(x, c(-prev_, -next_)))
lapply(multmonth, function(x) replace(x,is.na(diff_y1),0))
multmonth <- lapply(multmonth, function(x)
dplyr::select(x, c(-prev_, -next_)))
lapply(multmonth, function(x) replace(x,is.na(x$diff_y1),0))
lapply(multmonth, function(x) replace(x$diff_y1,is.na(x$diff_y1),0))
multmonth %>%
map(~replace(., is.na(~diff_y1), 0))
multmonth %>%
purrrr::map(~replace(., is.na(~diff_y1), 0))
multmonth %>%
purrr::map(~replace(., is.na(~diff_y1), 0))
lapply(multmonth, function(x) replace(x$diff_y1,is.na(x$diff_y1),0))
lapply(multmonth, function(x) replace(x,is.na(x$diff_y1),0))
lapply(multmonth, function(x) {
x$diff_y1[is.na(x$diff_y1)] <- 0
})
lapply(multmonth, function(x) {
x$diff_y1[is.na(x$diff_y1)] <- 0; x
})
multmonth <- lapply(multmonth, function(x) {
x$diff_y1[is.na(x$diff_y1)] <- 0; x
})
multmonth %>%
lapply(function(x) {
dplyr::filter(x, length(id) == sum(diff_y1) + 1) # %>%
})
multmonth %>%
lapply(function(x) {
dplyr::filter(x, length(id) == 2 & sum(diff_y1) == 11) # %>%
})
multmonth %>%
lapply(function(x) {
dplyr::filter(x, length(id) == 2 & sum(diff_y1) == abs(11)) # %>%
})
x=multmonth[[1]]
dplyr::filter(x, length(id) == sum(diff_y1) + 1)
length(x$id)
sum(x$diff_y1)
sum(x$diff_y1) + 1
species.name = "Nucula proxima"
df <- lapply(scaledprobs, function(x)
dplyr::filter(x,
species %in% species.name &
fill >= thresh.value))
# selects only a single month >= threshold
onemonth <- lapply(df, function(x) {
x %>%
dplyr::filter(
dplyr::n() == 1
)
})
# selects several months >= threshold
multmonth <- mapply(function(x, y) {
suppressMessages(
dplyr::anti_join(x, y)
) %>%
dplyr::mutate(
prev_ = dplyr::lag(month), # the previous item
next_ = dplyr::lead(month), # the next item
diff_y1 = dplyr::case_when( # ifelse
month == next_ | month == prev_ ~ 0,
TRUE ~ month - prev_
)
)
},
df,
onemonth
)
View(onemonth)
View(df)
species.name="Membranipora membranacea"
df <- lapply(scaledprobs, function(x)
dplyr::filter(x,
species %in% species.name &
fill >= thresh.value))
View(df)
onemonth <- lapply(df, function(x) {
x %>%
dplyr::filter(
dplyr::n() == 1
)
})
# selects several months >= threshold
multmonth <- mapply(function(x, y) {
suppressMessages(
dplyr::anti_join(x, y)
) %>%
dplyr::mutate(
prev_ = dplyr::lag(month), # the previous item
next_ = dplyr::lead(month), # the next item
diff_y1 = dplyr::case_when( # ifelse
month == next_ | month == prev_ ~ 0,
TRUE ~ month - prev_
)
)
},
df,
onemonth
)
multmonth <- lapply(multmonth, function(x)
dplyr::select(x, c(-prev_, -next_)))
multmonth <- lapply(multmonth, function(x) {
x$diff_y1[is.na(x$diff_y1)] <- 0; x
})
length(x$id)
x=multmonth[[1]]
length(x$id)
sum(x$diff_y1)
sum(x$diff_y1) + 1
View(x)
consecmonth1 <- multmonth %>%
lapply(function(x) {
dplyr::filter(x, length(x$id) == sum(x$diff_y1) + 1) # %>%
})
View(consecmonth1)
consec.det <- mapply(dplyr::bind_rows(),onemonth, consecmonth1, consecmonth2)
consec.det <- mapply(dplyr::bind_rows,onemonth, consecmonth1, consecmonth2)
consecmonth2 <- multmonth %>%
lapply(function(x) {
dplyr::filter(x, length(id) == 2 & sum(diff_y1) == 11) # %>%
})
consec.det <- mapply(dplyr::bind_rows,onemonth, consecmonth1, consecmonth2)
View(consec.det)
optwin <- lapply(consec.det, function(x) {
dplyr::select(x, -diff_y1) %>%
dplyr::mutate(window = "inwindow")
})
View(optwin)
inwindow <- lapply(optwin, function(x) {
x %>%
dplyr::group_by(id, ecodistrict, window) %>%
dplyr::summarise(
detect = sum(detect, na.rm = TRUE),
nondetect = sum(nondetect, na.rm = TRUE)
)
})
View(inwindow)
nowin <- mapply(function(x, y) {
dplyr::anti_join(x, y, by = c("id", "month")) %>%
dplyr::mutate(window = "outsidewindow")
},
df,
optwin)
View(nowin)
df <- lapply(scaledprobs, function(x)
dplyr::filter(x, species %in% species.name))
df_thresh <- lapply(scaledprobs, function(x)
dplyr::filter(x,
species %in% species.name &
fill >= thresh.value))
onemonth <- lapply(df_thresh, function(x) {
x %>%
dplyr::filter(
dplyr::n() == 1
)
})
multmonth <- mapply(function(x, y) {
suppressMessages(
dplyr::anti_join(x, y)
) %>%
dplyr::mutate(
prev_ = dplyr::lag(month), # the previous item
next_ = dplyr::lead(month), # the next item
diff_y1 = dplyr::case_when( # ifelse
month == next_ | month == prev_ ~ 0,
TRUE ~ month - prev_
)
)
},
df_thresh,
onemonth
)
multmonth <- lapply(multmonth, function(x)
dplyr::select(x, c(-prev_, -next_)))
multmonth <- lapply(multmonth, function(x) {
x$diff_y1[is.na(x$diff_y1)] <- 0; x
})
# selects species with consecutive months >= threshold
consecmonth1 <- multmonth %>%
lapply(function(x) {
dplyr::filter(x, length(x$id) == sum(x$diff_y1) + 1) # %>%
})
# selects spec
consecmonth2 <- multmonth %>%
lapply(function(x) {
dplyr::filter(x, length(id) == 2 & sum(diff_y1) == 11) # %>%
})
optwin <- lapply(consec.det, function(x) {
dplyr::select(x, -diff_y1) %>%
dplyr::mutate(window = "inwindow")
})
inwindow <- lapply(optwin, function(x) {
x %>%
dplyr::group_by(id, ecodistrict, window) %>%
dplyr::summarise(
detect = sum(detect, na.rm = TRUE),
nondetect = sum(nondetect, na.rm = TRUE)
)
})
nowin <- mapply(function(x, y) {
dplyr::anti_join(x, y, by = c("id", "month")) %>%
dplyr::mutate(window = "outsidewindow")
},
df,
optwin)
View(nowin)
outsidewindow <- lapply(nowin, function(x) {
x %>%
dplyr::group_by(id, ecodistrict, window) %>%
dplyr::summarise(
detect = sum(detect, na.rm = TRUE),
nondetect = sum(nondetect, na.rm = TRUE)
)
})
View(outsidewindow)
window_sum <- mapply(dplyr::bind_rows,inwindow, outsidewindow)
View(window_sum)
window_sum <- mapply(rbind,inwindow, outsidewindow)
window_sum <- mapply(function(x,y) {
dplyr::bind_rows(x,y)
},inwindow, outsidewindow)
window_sum <- mapply(function(x,y) {
dplyr::full_join(x,y)
},inwindow, outsidewindow)
outsidewindow[[1]]
inwindow[[1]]
window_sum <- mapply(bind_rows,inwindow, outsidewindow) %>%
split(.$id)
window_sum <- mapply(dplyr::bind_rows,inwindow, outsidewindow) %>%
split(.$id)
mapply(function(x,y) {
dplyr::bind_rows(
x, y
) %>%
split(.$id)
},
inwindow,
outsidewindow)
window_sum <- mapply(function(x,y) {
dplyr::bind_rows(
x, y
) %>%
split(.$id)
},
inwindow,
outsidewindow)
lapply(window_sum, function(x)
x[sapply(x, function(y) nrow(y) == 2)])
both_in_out <- lapply(window_sum, function(x)
x[sapply(x, function(y) nrow(y) == 2)])
fshTest <- vector("list", vector("list", length(names(both_in_out))))
length(sapply(names(both_in_out)))
fshTest <- vector("list", vector("list", length(sapply(names(both_in_out)))))
length(sapply(both_in_out, names()))
length(sapply(both_in_out, names(.)))
length(sapply(both_in_out, names(both_in_out)))
names(both_in_out)
for (var in names(both_in_out)) {
fshTest[[var]] <- vector("list", length(names(var)))
names(fshTest[[var]]) <- names(var)}
for (var in names(both_in_out)) {
fshTest <- vector("list", length(names(var)))
names(fshTest[[var]]) <- names(var)}
View(fshTest)
for (var in names(both_in_out)) {
fshTest <- vector("list", length(names(both_in_out[[var]])))
names(fshTest[[var]]) <- names(both_in_out[[var]])}
View(fshTest)
names(both_in_out[[var]])
length(names(both_in_out[[var]]))
fshTest <- vector("list")
names(fshTest[[var]]) <- names(both_in_out[[var]])}
names(fshTest[[var]]) <- names(both_in_out[[var]])
names(both_in_out[[var]])
names(fshTest[[var]])
